package utils;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;

import StockExc.StockValidationException;
import StockTradingService.Stock;

public class StockUtils {
	public static HashMap<String, Stock> populateHashMap() {
		HashMap<String, Stock> EmptyMap = new HashMap<>();
		EmptyMap.put("Apple Inc.", new Stock("Apple", "Apple Inc.", 1234.56, LocalDate.parse("2014-05-03"), 50));
		EmptyMap.put("TATA MOTORS",
				new Stock("TATA MOTORS", "TATA MOTORS Ltd.", 56.4321, LocalDate.parse("2016-11-09"), 70));
		EmptyMap.put("Hewlett Packard",
				new Stock("Hewlett Packard", "Hewlett Packard Ltd.", 111.22, LocalDate.parse("2007-01-08"), 20));
		return EmptyMap;
	}

	public static Stock validateAllInputs(String stockId, String stockName, String companyName, double price,
			String unchecedClosingDate, int quantity, HashMap<String, Stock> stocks)
			throws StockValidationException, DateTimeParseException {
		// checkForDuplicates(stockId,stocks);
		LocalDate checkedDate = parseAndValidateDate(unchecedClosingDate);
		Stock checkedStock = new Stock(stockName, companyName, price, checkedDate, quantity);
		return checkedStock;

	}

	public static LocalDate parseAndValidateDate(String unchecedClosingDate)
			throws DateTimeParseException, StockValidationException {
		LocalDate checkedDate = LocalDate.parse(unchecedClosingDate);
		if (checkedDate.isBefore(LocalDate.now())) {
			throw new StockValidationException("Closing Date should be a future date");
		}
		return checkedDate;
	}

	/*
	 * public static void checkForDuplicates(String stockId,HashMap<String,Stock>
	 * stocks) throws StockValidationException { if(stocks.containsKey(stockId)) {
	 * throw new StockValidationException("Stock ID already Exists"); }
	 * System.out.println("No Duplicates found!"); }
	 */
	public static void searchByCompany(String compName, HashMap<String, Stock> stocks) throws StockValidationException {
		// stocks
		System.out.println("Come");
		Collection<Stock> allCompStocks = new ArrayList<Stock>();
		
		System.out.println(allCompStocks);
		Collection<Stock> sameCompStocks = new ArrayList<Stock>();
		System.out.println(sameCompStocks);
		allCompStocks = stocks.values();
		System.out.println();
		//Set<Entry<String, Stock>> sameCompStocks = stocks.entrySet();
		if (stocks.containsKey("Apple Inc.")) {
			System.out.println("compName");
			throw new StockValidationException("This Company doesn't have any Stocks");
			
		} else {
			//ArrayList<Stock> sameCompStocks = new ArrayList<>();
			 //Set<Entry<String, Stock>> sameCompStocks = stocks.entrySet();
			for (Stock s : allCompStocks) {
				if ( s.getCompanyName().equals(compName)) {
					System.out.println("allCompStocks");
					sameCompStocks.add(s);
				}
			}
		}
		for(Stock s : sameCompStocks) {
			System.out.println(s);
		}
		//return sameCompStocks;
	}
}
