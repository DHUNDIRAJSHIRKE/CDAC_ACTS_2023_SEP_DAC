package cms;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import cms.custom.CustomerVerificationException;

public class CustomerValidRules {
	public static void DuplicateCust(String em, ArrayList<Customer> people) throws CustomerVerificationException {
		Customer cust = new Customer(em);
		if (people.contains(cust)) {
			throw new CustomerVerificationException("Try another E-mail.");
		}
		System.out.println("No duplicates found!");
	}

	public static void signInValid(String email, String password, ArrayList<Customer> people)
			throws CustomerVerificationException {
		// DuplicateCust(email, people);
		Customer d = new Customer(email);
		for (Customer e : people) {
			if (d.equals(e)) {
				// System.out.println("Email matched");
				// System.out.println("Enter Password:");
				if (password.equals(e.getPassword())) {
					throw new CustomerVerificationException("Sign in Successfull!!");
					//System.out.println("Sign in Successfull!!");
					//break;
				} else {
					throw new CustomerVerificationException("Invalid Password!!");
					//System.out.println("Invalid Password!!");
					//break;
				}
			}
		}
		System.out.println("Invalid Email!!");
	}

	public static void changePassword(String email, String oldPassword, String newPassword,
			ArrayList<Customer> people) throws CustomerVerificationException {
		Customer d = new Customer(email);
		for (Customer e : people) {
			if (d.equals(e)) {
				// System.out.println("Email matched");
				// System.out.println("Enter Password:");
				if (oldPassword.equals(e.getPassword())) {
					e.setPassword(newPassword);
					System.out.println("Pasword reset Successfull!!");
					break;
				} else {
					//System.out.println("Invalid Password!!");
					throw new CustomerVerificationException(" this is Invalid Password!!");
				}
			} else {
				throw new CustomerVerificationException("Invalid Email!!");
				//System.out.println("Invalid Email!!");
			}
		}
	}

	public static LocalDate parseAndValidateDate(String uncheckedDob)
			throws DateTimeParseException, CustomerVerificationException {
		LocalDate date = LocalDate.parse(uncheckedDob);
		return date;
	}

	public static Plan parseAndValidatePlan(String preCheckColor) {
		return Plan.valueOf(preCheckColor.toUpperCase());
	}

	public static Customer vaidateAllInputs(String fName, String lName, String em, String password, double regAmount,
			String dob, String plan, ArrayList<Customer> people)
			throws CustomerVerificationException, DateTimeParseException, IllegalArgumentException {

		DuplicateCust(em, people);
		LocalDate formDob = parseAndValidateDate(dob);
		Plan checkedplan = parseAndValidatePlan(plan);
		Customer c = new Customer(fName, lName, em, password, regAmount, formDob, checkedplan);
		return c;
	}
}

//String fName, String lName, String eMail, String password, double regAmount, LocalDate dob,Plan plan